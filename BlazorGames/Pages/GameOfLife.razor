@page "/gameoflife"

@using BlazorGames.Models.GameOfLife;
@using BlazorGames.Models.GameOfLife.Enums;
@using BlazorGames.Models.Common; 
@using BlazorGames.Pages.Partials; 
@using System.Security.Cryptography;

@code {
    public int Rows { get; set; }
    public int Columns { get; set; }
    public bool RunSimulation { get; set; }
    public Theme Theme { get; set; }

    public Status[,] Grid { get; set; }

    public GameOfLife()
    {
        Rows = 20;
        Columns = 20;
        Grid = new Status[Rows, Columns];
    }

    public async Task Run()
    {
        RunSimulation = true;
        while (RunSimulation)
        {
            CalculateNextGeneration();
            StateHasChanged();
            await Task.Delay(1000);
        }
    }

    public void Stop()
    {
        RunSimulation = false;
    }

    public void SetTheme(ChangeEventArgs e)
    {
        Theme = (Theme)Enum.Parse(typeof(Theme), e.Value.ToString());
    }

    public void ChangeStatus(int row, int column)
    {
        Grid[row, column] = Grid[row, column] == Status.Dead ? Status.Alive : Status.Dead;
    }

    public void Randomize()
    {
        for (var row = 0; row < Rows; row++)
        {
            for (var column = 0; column < Columns; column++)
            {
                Grid[row, column] = (Status)RandomNumberGenerator.GetInt32(0, 2);
            }
        }
    }

    //Code for this method originally by Khalid Abuhakmeh.
    //https://khalidabuhakmeh.com/program-the-game-of-life-with-csharp-and-emojis
    public void CalculateNextGeneration()
    {
        var nextGeneration = new Status[Rows, Columns];

        // Loop through every cell 
        for (var row = 1; row < Rows - 1; row++)
        {
            for (var column = 1; column < Columns - 1; column++)
            {
                // find your alive neighbors
                var aliveNeighbors = 0;
                for (var i = -1; i <= 1; i++)
                {
                    for (var j = -1; j <= 1; j++)
                    {
                        aliveNeighbors += Grid[row + i, column + j] == Status.Alive ? 1 : 0;
                    }
                }

                var currentCell = Grid[row, column];

                // The cell needs to be subtracted 
                // from its neighbors as it was  
                // counted before 
                aliveNeighbors -= currentCell == Status.Alive ? 1 : 0;

                // Implementing the Rules of Life 

                // Cell is lonely and dies 
                if (currentCell == Status.Alive && aliveNeighbors < 2)
                {
                    nextGeneration[row, column] = Status.Dead;
                }

                // Cell dies due to over population 
                else if (currentCell == Status.Alive && aliveNeighbors > 3)
                {
                    nextGeneration[row, column] = Status.Dead;
                }

                // A new cell is born 
                else if (currentCell == Status.Dead && aliveNeighbors == 3)
                {
                    nextGeneration[row, column] = Status.Alive;
                }
                // All other cells stay the same
                else
                {
                    nextGeneration[row, column] = currentCell;
                }
            }
        }
        Grid = nextGeneration;
    }
}

<PageTitle Title="Conway's Game of Life" />
<p class="font-italic">
    Special thanks to <a href="https://khalidabuhakmeh.com/program-the-game-of-life-with-csharp-and-emojis">Khalid Abuhakmeh</a> for the idea.
</p>

<div class="container">
    <div class="row">
        <div class="col-4">
            <label>Theme: </label>
            <select @onchange="@SetTheme">
                <option value="@Theme.Faces">@Theme.Faces.GetDisplayDescription()</option>
                <option value="@Theme.Cats">@Theme.Cats.GetDisplayDescription()</option>
                <option value="@Theme.Aliens">@Theme.Aliens.GetDisplayDescription()</option>
                <option value="@Theme.Boxes">@Theme.Boxes.GetDisplayDescription()</option>
            </select>
        </div>
        <div class="col-2">
            @if (RunSimulation)
            {
                <button class="btn btn-primary" disabled>Randomize</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="(() => Randomize())">Randomize</button>
            }
        </div>
        <div class="col-2">
            @if (RunSimulation)
            {
                <button class="btn btn-secondary" @onclick="(() => Stop())"><i class="fa fa-stop"></i> Stop</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="(async () => await Run())"><i class="fa fa-play"></i> Run</button>
            }
        </div>
    </div>
    @for (int i = 1; i < Rows; i++)
    {
        <div class="row flex-nowrap gameoflife-container">
            @for (int j = 1; j < Columns; j++)
            {
                var x = i;
                var y = j;
                var cell = Grid[x, y];

                if (cell == Status.Alive)
                {
                    <div class="gameoflife-alivecell-@Theme.GetDisplayName()"
                         @onclick="(() => ChangeStatus(x,y))"></div>
                }
                else
                {
                    <div class="gameoflife-cell gameoflife-deadcell-@Theme.GetDisplayName()"
                         @onclick="(() => ChangeStatus(x,y))"></div>
                }
            }
        </div>
    }
</div>

<hr />
<GameOfLifeRules/>

<hr />
<GameOfLifeHowToMake/>